/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export declare namespace Redistribution {
  export type RevealStruct = {
    owner: PromiseOrValue<string>;
    overlay: PromiseOrValue<BytesLike>;
    stake: PromiseOrValue<BigNumberish>;
    stakeDensity: PromiseOrValue<BigNumberish>;
    hash: PromiseOrValue<BytesLike>;
    depth: PromiseOrValue<BigNumberish>;
  };

  export type RevealStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    number
  ] & {
    owner: string;
    overlay: string;
    stake: BigNumber;
    stakeDensity: BigNumber;
    hash: string;
    depth: number;
  };
}

export interface RedistributionInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OracleContract()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "PostageContract()": FunctionFragment;
    "Stakes()": FunctionFragment;
    "claim()": FunctionFragment;
    "commit(bytes32,bytes32,uint256)": FunctionFragment;
    "currentClaimRound()": FunctionFragment;
    "currentCommitRound()": FunctionFragment;
    "currentCommits(uint256)": FunctionFragment;
    "currentPhaseClaim()": FunctionFragment;
    "currentPhaseCommit()": FunctionFragment;
    "currentPhaseReveal()": FunctionFragment;
    "currentRevealRound()": FunctionFragment;
    "currentReveals(uint256)": FunctionFragment;
    "currentRound()": FunctionFragment;
    "currentRoundAnchor()": FunctionFragment;
    "currentRoundReveals()": FunctionFragment;
    "currentSeed()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "inProximity(bytes32,bytes32,uint8)": FunctionFragment;
    "isParticipatingInUpcomingRound(bytes32,uint8)": FunctionFragment;
    "isWinner(bytes32)": FunctionFragment;
    "minimumStake()": FunctionFragment;
    "nextSeed()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "penaltyMultiplierDisagreement()": FunctionFragment;
    "penaltyMultiplierNonRevealed()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "reveal(bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "roundLength()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unPause()": FunctionFragment;
    "winner()": FunctionFragment;
    "wrapCommit(bytes32,uint8,bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "OracleContract"
      | "PAUSER_ROLE"
      | "PostageContract"
      | "Stakes"
      | "claim"
      | "commit"
      | "currentClaimRound"
      | "currentCommitRound"
      | "currentCommits"
      | "currentPhaseClaim"
      | "currentPhaseCommit"
      | "currentPhaseReveal"
      | "currentRevealRound"
      | "currentReveals"
      | "currentRound"
      | "currentRoundAnchor"
      | "currentRoundReveals"
      | "currentSeed"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "inProximity"
      | "isParticipatingInUpcomingRound"
      | "isWinner"
      | "minimumStake"
      | "nextSeed"
      | "pause"
      | "paused"
      | "penaltyMultiplierDisagreement"
      | "penaltyMultiplierNonRevealed"
      | "renounceRole"
      | "reveal"
      | "revokeRole"
      | "roundLength"
      | "supportsInterface"
      | "unPause"
      | "winner"
      | "wrapCommit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OracleContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PostageContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Stakes", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commit",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentClaimRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentCommitRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentCommits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhaseClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhaseCommit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhaseReveal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRevealRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentReveals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoundAnchor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoundReveals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "inProximity",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isParticipatingInUpcomingRound",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWinner",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nextSeed", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "penaltyMultiplierDisagreement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "penaltyMultiplierNonRevealed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "roundLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "unPause", values?: undefined): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wrapCommit",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OracleContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PostageContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "commit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentClaimRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentCommitRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentCommits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPhaseClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPhaseCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPhaseReveal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRevealRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentReveals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundAnchor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundReveals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inProximity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isParticipatingInUpcomingRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextSeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "penaltyMultiplierDisagreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "penaltyMultiplierNonRevealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roundLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unPause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrapCommit", data: BytesLike): Result;

  events: {
    "Committed(uint256,bytes32)": EventFragment;
    "CountCommits(uint256)": EventFragment;
    "CountReveals(uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "Revealed(uint256,bytes32,uint256,uint256,bytes32,uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TruthSelected(bytes32,uint8)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WinnerSelected(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Committed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CountCommits"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CountReveals"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TruthSelected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinnerSelected"): EventFragment;
}

export interface CommittedEventObject {
  roundNumber: BigNumber;
  overlay: string;
}
export type CommittedEvent = TypedEvent<
  [BigNumber, string],
  CommittedEventObject
>;

export type CommittedEventFilter = TypedEventFilter<CommittedEvent>;

export interface CountCommitsEventObject {
  _count: BigNumber;
}
export type CountCommitsEvent = TypedEvent<
  [BigNumber],
  CountCommitsEventObject
>;

export type CountCommitsEventFilter = TypedEventFilter<CountCommitsEvent>;

export interface CountRevealsEventObject {
  _count: BigNumber;
}
export type CountRevealsEvent = TypedEvent<
  [BigNumber],
  CountRevealsEventObject
>;

export type CountRevealsEventFilter = TypedEventFilter<CountRevealsEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RevealedEventObject {
  roundNumber: BigNumber;
  overlay: string;
  stake: BigNumber;
  stakeDensity: BigNumber;
  reserveCommitment: string;
  depth: number;
}
export type RevealedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string, number],
  RevealedEventObject
>;

export type RevealedEventFilter = TypedEventFilter<RevealedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TruthSelectedEventObject {
  hash: string;
  depth: number;
}
export type TruthSelectedEvent = TypedEvent<
  [string, number],
  TruthSelectedEventObject
>;

export type TruthSelectedEventFilter = TypedEventFilter<TruthSelectedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WinnerSelectedEventObject {
  winner: Redistribution.RevealStructOutput;
}
export type WinnerSelectedEvent = TypedEvent<
  [Redistribution.RevealStructOutput],
  WinnerSelectedEventObject
>;

export type WinnerSelectedEventFilter = TypedEventFilter<WinnerSelectedEvent>;

export interface Redistribution extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RedistributionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OracleContract(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PostageContract(overrides?: CallOverrides): Promise<[string]>;

    Stakes(overrides?: CallOverrides): Promise<[string]>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commit(
      _obfuscatedHash: PromiseOrValue<BytesLike>,
      _overlay: PromiseOrValue<BytesLike>,
      _roundNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentClaimRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentCommitRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentCommits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, boolean, BigNumber] & {
        overlay: string;
        owner: string;
        stake: BigNumber;
        obfuscatedHash: string;
        revealed: boolean;
        revealIndex: BigNumber;
      }
    >;

    currentPhaseClaim(overrides?: CallOverrides): Promise<[boolean]>;

    currentPhaseCommit(overrides?: CallOverrides): Promise<[boolean]>;

    currentPhaseReveal(overrides?: CallOverrides): Promise<[boolean]>;

    currentRevealRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentReveals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string, number] & {
        owner: string;
        overlay: string;
        stake: BigNumber;
        stakeDensity: BigNumber;
        hash: string;
        depth: number;
      }
    >;

    currentRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentRoundAnchor(
      overrides?: CallOverrides
    ): Promise<[string] & { returnVal: string }>;

    currentRoundReveals(
      overrides?: CallOverrides
    ): Promise<[Redistribution.RevealStructOutput[]]>;

    currentSeed(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    inProximity(
      A: PromiseOrValue<BytesLike>,
      B: PromiseOrValue<BytesLike>,
      minimum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isParticipatingInUpcomingRound(
      overlay: PromiseOrValue<BytesLike>,
      depth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWinner(
      _overlay: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minimumStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextSeed(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    penaltyMultiplierDisagreement(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    penaltyMultiplierNonRevealed(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reveal(
      _overlay: PromiseOrValue<BytesLike>,
      _depth: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      _revealNonce: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roundLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    winner(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string, number] & {
        owner: string;
        overlay: string;
        stake: BigNumber;
        stakeDensity: BigNumber;
        hash: string;
        depth: number;
      }
    >;

    wrapCommit(
      _overlay: PromiseOrValue<BytesLike>,
      _depth: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      revealNonce: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OracleContract(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  PostageContract(overrides?: CallOverrides): Promise<string>;

  Stakes(overrides?: CallOverrides): Promise<string>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commit(
    _obfuscatedHash: PromiseOrValue<BytesLike>,
    _overlay: PromiseOrValue<BytesLike>,
    _roundNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentClaimRound(overrides?: CallOverrides): Promise<BigNumber>;

  currentCommitRound(overrides?: CallOverrides): Promise<BigNumber>;

  currentCommits(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, boolean, BigNumber] & {
      overlay: string;
      owner: string;
      stake: BigNumber;
      obfuscatedHash: string;
      revealed: boolean;
      revealIndex: BigNumber;
    }
  >;

  currentPhaseClaim(overrides?: CallOverrides): Promise<boolean>;

  currentPhaseCommit(overrides?: CallOverrides): Promise<boolean>;

  currentPhaseReveal(overrides?: CallOverrides): Promise<boolean>;

  currentRevealRound(overrides?: CallOverrides): Promise<BigNumber>;

  currentReveals(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, string, number] & {
      owner: string;
      overlay: string;
      stake: BigNumber;
      stakeDensity: BigNumber;
      hash: string;
      depth: number;
    }
  >;

  currentRound(overrides?: CallOverrides): Promise<BigNumber>;

  currentRoundAnchor(overrides?: CallOverrides): Promise<string>;

  currentRoundReveals(
    overrides?: CallOverrides
  ): Promise<Redistribution.RevealStructOutput[]>;

  currentSeed(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  inProximity(
    A: PromiseOrValue<BytesLike>,
    B: PromiseOrValue<BytesLike>,
    minimum: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isParticipatingInUpcomingRound(
    overlay: PromiseOrValue<BytesLike>,
    depth: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWinner(
    _overlay: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minimumStake(overrides?: CallOverrides): Promise<BigNumber>;

  nextSeed(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  penaltyMultiplierDisagreement(overrides?: CallOverrides): Promise<BigNumber>;

  penaltyMultiplierNonRevealed(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reveal(
    _overlay: PromiseOrValue<BytesLike>,
    _depth: PromiseOrValue<BigNumberish>,
    _hash: PromiseOrValue<BytesLike>,
    _revealNonce: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roundLength(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unPause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  winner(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, string, number] & {
      owner: string;
      overlay: string;
      stake: BigNumber;
      stakeDensity: BigNumber;
      hash: string;
      depth: number;
    }
  >;

  wrapCommit(
    _overlay: PromiseOrValue<BytesLike>,
    _depth: PromiseOrValue<BigNumberish>,
    _hash: PromiseOrValue<BytesLike>,
    revealNonce: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OracleContract(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    PostageContract(overrides?: CallOverrides): Promise<string>;

    Stakes(overrides?: CallOverrides): Promise<string>;

    claim(overrides?: CallOverrides): Promise<void>;

    commit(
      _obfuscatedHash: PromiseOrValue<BytesLike>,
      _overlay: PromiseOrValue<BytesLike>,
      _roundNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentClaimRound(overrides?: CallOverrides): Promise<BigNumber>;

    currentCommitRound(overrides?: CallOverrides): Promise<BigNumber>;

    currentCommits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, boolean, BigNumber] & {
        overlay: string;
        owner: string;
        stake: BigNumber;
        obfuscatedHash: string;
        revealed: boolean;
        revealIndex: BigNumber;
      }
    >;

    currentPhaseClaim(overrides?: CallOverrides): Promise<boolean>;

    currentPhaseCommit(overrides?: CallOverrides): Promise<boolean>;

    currentPhaseReveal(overrides?: CallOverrides): Promise<boolean>;

    currentRevealRound(overrides?: CallOverrides): Promise<BigNumber>;

    currentReveals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string, number] & {
        owner: string;
        overlay: string;
        stake: BigNumber;
        stakeDensity: BigNumber;
        hash: string;
        depth: number;
      }
    >;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    currentRoundAnchor(overrides?: CallOverrides): Promise<string>;

    currentRoundReveals(
      overrides?: CallOverrides
    ): Promise<Redistribution.RevealStructOutput[]>;

    currentSeed(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    inProximity(
      A: PromiseOrValue<BytesLike>,
      B: PromiseOrValue<BytesLike>,
      minimum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isParticipatingInUpcomingRound(
      overlay: PromiseOrValue<BytesLike>,
      depth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWinner(
      _overlay: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minimumStake(overrides?: CallOverrides): Promise<BigNumber>;

    nextSeed(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    penaltyMultiplierDisagreement(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    penaltyMultiplierNonRevealed(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    reveal(
      _overlay: PromiseOrValue<BytesLike>,
      _depth: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      _revealNonce: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    roundLength(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unPause(overrides?: CallOverrides): Promise<void>;

    winner(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, string, number] & {
        owner: string;
        overlay: string;
        stake: BigNumber;
        stakeDensity: BigNumber;
        hash: string;
        depth: number;
      }
    >;

    wrapCommit(
      _overlay: PromiseOrValue<BytesLike>,
      _depth: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      revealNonce: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Committed(uint256,bytes32)"(
      roundNumber?: null,
      overlay?: null
    ): CommittedEventFilter;
    Committed(roundNumber?: null, overlay?: null): CommittedEventFilter;

    "CountCommits(uint256)"(_count?: null): CountCommitsEventFilter;
    CountCommits(_count?: null): CountCommitsEventFilter;

    "CountReveals(uint256)"(_count?: null): CountRevealsEventFilter;
    CountReveals(_count?: null): CountRevealsEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Revealed(uint256,bytes32,uint256,uint256,bytes32,uint8)"(
      roundNumber?: null,
      overlay?: null,
      stake?: null,
      stakeDensity?: null,
      reserveCommitment?: null,
      depth?: null
    ): RevealedEventFilter;
    Revealed(
      roundNumber?: null,
      overlay?: null,
      stake?: null,
      stakeDensity?: null,
      reserveCommitment?: null,
      depth?: null
    ): RevealedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "TruthSelected(bytes32,uint8)"(
      hash?: null,
      depth?: null
    ): TruthSelectedEventFilter;
    TruthSelected(hash?: null, depth?: null): TruthSelectedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WinnerSelected(tuple)"(winner?: null): WinnerSelectedEventFilter;
    WinnerSelected(winner?: null): WinnerSelectedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OracleContract(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PostageContract(overrides?: CallOverrides): Promise<BigNumber>;

    Stakes(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commit(
      _obfuscatedHash: PromiseOrValue<BytesLike>,
      _overlay: PromiseOrValue<BytesLike>,
      _roundNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentClaimRound(overrides?: CallOverrides): Promise<BigNumber>;

    currentCommitRound(overrides?: CallOverrides): Promise<BigNumber>;

    currentCommits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPhaseClaim(overrides?: CallOverrides): Promise<BigNumber>;

    currentPhaseCommit(overrides?: CallOverrides): Promise<BigNumber>;

    currentPhaseReveal(overrides?: CallOverrides): Promise<BigNumber>;

    currentRevealRound(overrides?: CallOverrides): Promise<BigNumber>;

    currentReveals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    currentRoundAnchor(overrides?: CallOverrides): Promise<BigNumber>;

    currentRoundReveals(overrides?: CallOverrides): Promise<BigNumber>;

    currentSeed(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inProximity(
      A: PromiseOrValue<BytesLike>,
      B: PromiseOrValue<BytesLike>,
      minimum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isParticipatingInUpcomingRound(
      overlay: PromiseOrValue<BytesLike>,
      depth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWinner(
      _overlay: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumStake(overrides?: CallOverrides): Promise<BigNumber>;

    nextSeed(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    penaltyMultiplierDisagreement(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    penaltyMultiplierNonRevealed(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reveal(
      _overlay: PromiseOrValue<BytesLike>,
      _depth: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      _revealNonce: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roundLength(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    winner(overrides?: CallOverrides): Promise<BigNumber>;

    wrapCommit(
      _overlay: PromiseOrValue<BytesLike>,
      _depth: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      revealNonce: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OracleContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PostageContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Stakes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commit(
      _obfuscatedHash: PromiseOrValue<BytesLike>,
      _overlay: PromiseOrValue<BytesLike>,
      _roundNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentClaimRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentCommitRound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentCommits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPhaseClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentPhaseCommit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPhaseReveal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRevealRound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentReveals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentRoundAnchor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRoundReveals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentSeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inProximity(
      A: PromiseOrValue<BytesLike>,
      B: PromiseOrValue<BytesLike>,
      minimum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isParticipatingInUpcomingRound(
      overlay: PromiseOrValue<BytesLike>,
      depth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWinner(
      _overlay: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextSeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    penaltyMultiplierDisagreement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    penaltyMultiplierNonRevealed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reveal(
      _overlay: PromiseOrValue<BytesLike>,
      _depth: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      _revealNonce: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roundLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    winner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrapCommit(
      _overlay: PromiseOrValue<BytesLike>,
      _depth: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      revealNonce: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
