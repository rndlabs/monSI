/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace PostageStamp {
  export type ImportBatchStruct = {
    batchId: PromiseOrValue<BytesLike>;
    owner: PromiseOrValue<string>;
    depth: PromiseOrValue<BigNumberish>;
    bucketDepth: PromiseOrValue<BigNumberish>;
    immutableFlag: PromiseOrValue<boolean>;
    remainingBalance: PromiseOrValue<BigNumberish>;
  };

  export type ImportBatchStructOutput = [
    string,
    string,
    number,
    number,
    boolean,
    BigNumber
  ] & {
    batchId: string;
    owner: string;
    depth: number;
    bucketDepth: number;
    immutableFlag: boolean;
    remainingBalance: BigNumber;
  };
}

export interface PostageStampInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "PRICE_ORACLE_ROLE()": FunctionFragment;
    "REDISTRIBUTOR_ROLE()": FunctionFragment;
    "batchBucketDepth(bytes32)": FunctionFragment;
    "batchDepth(bytes32)": FunctionFragment;
    "batchImmutableFlag(bytes32)": FunctionFragment;
    "batchLastUpdatedBlockNumber(bytes32)": FunctionFragment;
    "batchNormalisedBalance(bytes32)": FunctionFragment;
    "batchOwner(bytes32)": FunctionFragment;
    "batches(bytes32)": FunctionFragment;
    "bzzToken()": FunctionFragment;
    "copyBatch(address,uint256,uint8,uint8,bytes32,bool)": FunctionFragment;
    "copyBatchBulk((bytes32,address,uint8,uint8,bool,uint256)[])": FunctionFragment;
    "createBatch(address,uint256,uint8,uint8,bytes32,bool)": FunctionFragment;
    "currentTotalOutPayment()": FunctionFragment;
    "expireLimited(uint256)": FunctionFragment;
    "expiredBatchesExist()": FunctionFragment;
    "firstBatchId()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "increaseDepth(bytes32,uint8)": FunctionFragment;
    "isBatchesTreeEmpty()": FunctionFragment;
    "lastExpiryBalance()": FunctionFragment;
    "lastPrice()": FunctionFragment;
    "lastUpdatedBlock()": FunctionFragment;
    "minimumBucketDepth()": FunctionFragment;
    "minimumInitialBalancePerChunk()": FunctionFragment;
    "minimumValidityBlocks()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pot()": FunctionFragment;
    "remainingBalance(bytes32)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setMinimumValidityBlocks(uint64)": FunctionFragment;
    "setPrice(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "topUp(bytes32,uint256)": FunctionFragment;
    "totalPot()": FunctionFragment;
    "unPause()": FunctionFragment;
    "validChunkCount()": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "PAUSER_ROLE"
      | "PRICE_ORACLE_ROLE"
      | "REDISTRIBUTOR_ROLE"
      | "batchBucketDepth"
      | "batchDepth"
      | "batchImmutableFlag"
      | "batchLastUpdatedBlockNumber"
      | "batchNormalisedBalance"
      | "batchOwner"
      | "batches"
      | "bzzToken"
      | "copyBatch"
      | "copyBatchBulk"
      | "createBatch"
      | "currentTotalOutPayment"
      | "expireLimited"
      | "expiredBatchesExist"
      | "firstBatchId"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "increaseDepth"
      | "isBatchesTreeEmpty"
      | "lastExpiryBalance"
      | "lastPrice"
      | "lastUpdatedBlock"
      | "minimumBucketDepth"
      | "minimumInitialBalancePerChunk"
      | "minimumValidityBlocks"
      | "pause"
      | "paused"
      | "pot"
      | "remainingBalance"
      | "renounceRole"
      | "revokeRole"
      | "setMinimumValidityBlocks"
      | "setPrice"
      | "supportsInterface"
      | "topUp"
      | "totalPot"
      | "unPause"
      | "validChunkCount"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_ORACLE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REDISTRIBUTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchBucketDepth",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchDepth",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchImmutableFlag",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchLastUpdatedBlockNumber",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchNormalisedBalance",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchOwner",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "batches",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "bzzToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "copyBatch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "copyBatchBulk",
    values: [PostageStamp.ImportBatchStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createBatch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentTotalOutPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expireLimited",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "expiredBatchesExist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseDepth",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBatchesTreeEmpty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastExpiryBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastUpdatedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumBucketDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumInitialBalancePerChunk",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumValidityBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remainingBalance",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumValidityBlocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "topUp",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "totalPot", values?: undefined): string;
  encodeFunctionData(functionFragment: "unPause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validChunkCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_ORACLE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDISTRIBUTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBucketDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchDepth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchImmutableFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchLastUpdatedBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchNormalisedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bzzToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "copyBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "copyBatchBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTotalOutPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireLimited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expiredBatchesExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBatchesTreeEmpty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastExpiryBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdatedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumBucketDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumInitialBalancePerChunk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumValidityBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumValidityBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "topUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalPot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validChunkCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BatchCreated(bytes32,uint256,uint256,address,uint8,uint8,bool)": EventFragment;
    "BatchDepthIncrease(bytes32,uint8,uint256)": EventFragment;
    "BatchTopUp(bytes32,uint256,uint256)": EventFragment;
    "CopyBatchFailed(uint256,bytes32)": EventFragment;
    "Paused(address)": EventFragment;
    "PotWithdrawn(address,uint256)": EventFragment;
    "PriceUpdate(uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BatchDepthIncrease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BatchTopUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CopyBatchFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PotWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface BatchCreatedEventObject {
  batchId: string;
  totalAmount: BigNumber;
  normalisedBalance: BigNumber;
  owner: string;
  depth: number;
  bucketDepth: number;
  immutableFlag: boolean;
}
export type BatchCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, number, number, boolean],
  BatchCreatedEventObject
>;

export type BatchCreatedEventFilter = TypedEventFilter<BatchCreatedEvent>;

export interface BatchDepthIncreaseEventObject {
  batchId: string;
  newDepth: number;
  normalisedBalance: BigNumber;
}
export type BatchDepthIncreaseEvent = TypedEvent<
  [string, number, BigNumber],
  BatchDepthIncreaseEventObject
>;

export type BatchDepthIncreaseEventFilter =
  TypedEventFilter<BatchDepthIncreaseEvent>;

export interface BatchTopUpEventObject {
  batchId: string;
  topupAmount: BigNumber;
  normalisedBalance: BigNumber;
}
export type BatchTopUpEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BatchTopUpEventObject
>;

export type BatchTopUpEventFilter = TypedEventFilter<BatchTopUpEvent>;

export interface CopyBatchFailedEventObject {
  index: BigNumber;
  batchId: string;
}
export type CopyBatchFailedEvent = TypedEvent<
  [BigNumber, string],
  CopyBatchFailedEventObject
>;

export type CopyBatchFailedEventFilter = TypedEventFilter<CopyBatchFailedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PotWithdrawnEventObject {
  recipient: string;
  totalAmount: BigNumber;
}
export type PotWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  PotWithdrawnEventObject
>;

export type PotWithdrawnEventFilter = TypedEventFilter<PotWithdrawnEvent>;

export interface PriceUpdateEventObject {
  price: BigNumber;
}
export type PriceUpdateEvent = TypedEvent<[BigNumber], PriceUpdateEventObject>;

export type PriceUpdateEventFilter = TypedEventFilter<PriceUpdateEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface PostageStamp extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PostageStampInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PRICE_ORACLE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    REDISTRIBUTOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    batchBucketDepth(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    batchDepth(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    batchImmutableFlag(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    batchLastUpdatedBlockNumber(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    batchNormalisedBalance(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    batchOwner(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    batches(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, boolean, BigNumber, BigNumber] & {
        owner: string;
        depth: number;
        bucketDepth: number;
        immutableFlag: boolean;
        normalisedBalance: BigNumber;
        lastUpdatedBlockNumber: BigNumber;
      }
    >;

    bzzToken(overrides?: CallOverrides): Promise<[string]>;

    copyBatch(
      _owner: PromiseOrValue<string>,
      _initialBalancePerChunk: PromiseOrValue<BigNumberish>,
      _depth: PromiseOrValue<BigNumberish>,
      _bucketDepth: PromiseOrValue<BigNumberish>,
      _batchId: PromiseOrValue<BytesLike>,
      _immutable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    copyBatchBulk(
      bulkBatches: PostageStamp.ImportBatchStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createBatch(
      _owner: PromiseOrValue<string>,
      _initialBalancePerChunk: PromiseOrValue<BigNumberish>,
      _depth: PromiseOrValue<BigNumberish>,
      _bucketDepth: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BytesLike>,
      _immutable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentTotalOutPayment(overrides?: CallOverrides): Promise<[BigNumber]>;

    expireLimited(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    expiredBatchesExist(overrides?: CallOverrides): Promise<[boolean]>;

    firstBatchId(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseDepth(
      _batchId: PromiseOrValue<BytesLike>,
      _newDepth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isBatchesTreeEmpty(overrides?: CallOverrides): Promise<[boolean]>;

    lastExpiryBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumBucketDepth(overrides?: CallOverrides): Promise<[number]>;

    minimumInitialBalancePerChunk(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minimumValidityBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pot(overrides?: CallOverrides): Promise<[BigNumber]>;

    remainingBalance(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumValidityBlocks(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    topUp(
      _batchId: PromiseOrValue<BytesLike>,
      _topupAmountPerChunk: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalPot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validChunkCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  PRICE_ORACLE_ROLE(overrides?: CallOverrides): Promise<string>;

  REDISTRIBUTOR_ROLE(overrides?: CallOverrides): Promise<string>;

  batchBucketDepth(
    _batchId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  batchDepth(
    _batchId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  batchImmutableFlag(
    _batchId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  batchLastUpdatedBlockNumber(
    _batchId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchNormalisedBalance(
    _batchId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchOwner(
    _batchId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  batches(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, boolean, BigNumber, BigNumber] & {
      owner: string;
      depth: number;
      bucketDepth: number;
      immutableFlag: boolean;
      normalisedBalance: BigNumber;
      lastUpdatedBlockNumber: BigNumber;
    }
  >;

  bzzToken(overrides?: CallOverrides): Promise<string>;

  copyBatch(
    _owner: PromiseOrValue<string>,
    _initialBalancePerChunk: PromiseOrValue<BigNumberish>,
    _depth: PromiseOrValue<BigNumberish>,
    _bucketDepth: PromiseOrValue<BigNumberish>,
    _batchId: PromiseOrValue<BytesLike>,
    _immutable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  copyBatchBulk(
    bulkBatches: PostageStamp.ImportBatchStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createBatch(
    _owner: PromiseOrValue<string>,
    _initialBalancePerChunk: PromiseOrValue<BigNumberish>,
    _depth: PromiseOrValue<BigNumberish>,
    _bucketDepth: PromiseOrValue<BigNumberish>,
    _nonce: PromiseOrValue<BytesLike>,
    _immutable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentTotalOutPayment(overrides?: CallOverrides): Promise<BigNumber>;

  expireLimited(
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  expiredBatchesExist(overrides?: CallOverrides): Promise<boolean>;

  firstBatchId(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseDepth(
    _batchId: PromiseOrValue<BytesLike>,
    _newDepth: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isBatchesTreeEmpty(overrides?: CallOverrides): Promise<boolean>;

  lastExpiryBalance(overrides?: CallOverrides): Promise<BigNumber>;

  lastPrice(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  minimumBucketDepth(overrides?: CallOverrides): Promise<number>;

  minimumInitialBalancePerChunk(overrides?: CallOverrides): Promise<BigNumber>;

  minimumValidityBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pot(overrides?: CallOverrides): Promise<BigNumber>;

  remainingBalance(
    _batchId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumValidityBlocks(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrice(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  topUp(
    _batchId: PromiseOrValue<BytesLike>,
    _topupAmountPerChunk: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalPot(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unPause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validChunkCount(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    PRICE_ORACLE_ROLE(overrides?: CallOverrides): Promise<string>;

    REDISTRIBUTOR_ROLE(overrides?: CallOverrides): Promise<string>;

    batchBucketDepth(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    batchDepth(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    batchImmutableFlag(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    batchLastUpdatedBlockNumber(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchNormalisedBalance(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchOwner(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    batches(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, boolean, BigNumber, BigNumber] & {
        owner: string;
        depth: number;
        bucketDepth: number;
        immutableFlag: boolean;
        normalisedBalance: BigNumber;
        lastUpdatedBlockNumber: BigNumber;
      }
    >;

    bzzToken(overrides?: CallOverrides): Promise<string>;

    copyBatch(
      _owner: PromiseOrValue<string>,
      _initialBalancePerChunk: PromiseOrValue<BigNumberish>,
      _depth: PromiseOrValue<BigNumberish>,
      _bucketDepth: PromiseOrValue<BigNumberish>,
      _batchId: PromiseOrValue<BytesLike>,
      _immutable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    copyBatchBulk(
      bulkBatches: PostageStamp.ImportBatchStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    createBatch(
      _owner: PromiseOrValue<string>,
      _initialBalancePerChunk: PromiseOrValue<BigNumberish>,
      _depth: PromiseOrValue<BigNumberish>,
      _bucketDepth: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BytesLike>,
      _immutable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    currentTotalOutPayment(overrides?: CallOverrides): Promise<BigNumber>;

    expireLimited(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    expiredBatchesExist(overrides?: CallOverrides): Promise<boolean>;

    firstBatchId(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseDepth(
      _batchId: PromiseOrValue<BytesLike>,
      _newDepth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isBatchesTreeEmpty(overrides?: CallOverrides): Promise<boolean>;

    lastExpiryBalance(overrides?: CallOverrides): Promise<BigNumber>;

    lastPrice(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    minimumBucketDepth(overrides?: CallOverrides): Promise<number>;

    minimumInitialBalancePerChunk(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumValidityBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pot(overrides?: CallOverrides): Promise<BigNumber>;

    remainingBalance(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumValidityBlocks(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    topUp(
      _batchId: PromiseOrValue<BytesLike>,
      _topupAmountPerChunk: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalPot(overrides?: CallOverrides): Promise<BigNumber>;

    unPause(overrides?: CallOverrides): Promise<void>;

    validChunkCount(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BatchCreated(bytes32,uint256,uint256,address,uint8,uint8,bool)"(
      batchId?: PromiseOrValue<BytesLike> | null,
      totalAmount?: null,
      normalisedBalance?: null,
      owner?: null,
      depth?: null,
      bucketDepth?: null,
      immutableFlag?: null
    ): BatchCreatedEventFilter;
    BatchCreated(
      batchId?: PromiseOrValue<BytesLike> | null,
      totalAmount?: null,
      normalisedBalance?: null,
      owner?: null,
      depth?: null,
      bucketDepth?: null,
      immutableFlag?: null
    ): BatchCreatedEventFilter;

    "BatchDepthIncrease(bytes32,uint8,uint256)"(
      batchId?: PromiseOrValue<BytesLike> | null,
      newDepth?: null,
      normalisedBalance?: null
    ): BatchDepthIncreaseEventFilter;
    BatchDepthIncrease(
      batchId?: PromiseOrValue<BytesLike> | null,
      newDepth?: null,
      normalisedBalance?: null
    ): BatchDepthIncreaseEventFilter;

    "BatchTopUp(bytes32,uint256,uint256)"(
      batchId?: PromiseOrValue<BytesLike> | null,
      topupAmount?: null,
      normalisedBalance?: null
    ): BatchTopUpEventFilter;
    BatchTopUp(
      batchId?: PromiseOrValue<BytesLike> | null,
      topupAmount?: null,
      normalisedBalance?: null
    ): BatchTopUpEventFilter;

    "CopyBatchFailed(uint256,bytes32)"(
      index?: null,
      batchId?: null
    ): CopyBatchFailedEventFilter;
    CopyBatchFailed(index?: null, batchId?: null): CopyBatchFailedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PotWithdrawn(address,uint256)"(
      recipient?: null,
      totalAmount?: null
    ): PotWithdrawnEventFilter;
    PotWithdrawn(recipient?: null, totalAmount?: null): PotWithdrawnEventFilter;

    "PriceUpdate(uint256)"(price?: null): PriceUpdateEventFilter;
    PriceUpdate(price?: null): PriceUpdateEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_ORACLE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    REDISTRIBUTOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    batchBucketDepth(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchDepth(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchImmutableFlag(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchLastUpdatedBlockNumber(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchNormalisedBalance(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchOwner(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batches(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bzzToken(overrides?: CallOverrides): Promise<BigNumber>;

    copyBatch(
      _owner: PromiseOrValue<string>,
      _initialBalancePerChunk: PromiseOrValue<BigNumberish>,
      _depth: PromiseOrValue<BigNumberish>,
      _bucketDepth: PromiseOrValue<BigNumberish>,
      _batchId: PromiseOrValue<BytesLike>,
      _immutable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    copyBatchBulk(
      bulkBatches: PostageStamp.ImportBatchStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createBatch(
      _owner: PromiseOrValue<string>,
      _initialBalancePerChunk: PromiseOrValue<BigNumberish>,
      _depth: PromiseOrValue<BigNumberish>,
      _bucketDepth: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BytesLike>,
      _immutable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentTotalOutPayment(overrides?: CallOverrides): Promise<BigNumber>;

    expireLimited(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    expiredBatchesExist(overrides?: CallOverrides): Promise<BigNumber>;

    firstBatchId(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseDepth(
      _batchId: PromiseOrValue<BytesLike>,
      _newDepth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isBatchesTreeEmpty(overrides?: CallOverrides): Promise<BigNumber>;

    lastExpiryBalance(overrides?: CallOverrides): Promise<BigNumber>;

    lastPrice(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    minimumBucketDepth(overrides?: CallOverrides): Promise<BigNumber>;

    minimumInitialBalancePerChunk(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumValidityBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pot(overrides?: CallOverrides): Promise<BigNumber>;

    remainingBalance(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumValidityBlocks(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topUp(
      _batchId: PromiseOrValue<BytesLike>,
      _topupAmountPerChunk: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalPot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validChunkCount(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_ORACLE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REDISTRIBUTOR_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchBucketDepth(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchDepth(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchImmutableFlag(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchLastUpdatedBlockNumber(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchNormalisedBalance(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchOwner(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batches(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bzzToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    copyBatch(
      _owner: PromiseOrValue<string>,
      _initialBalancePerChunk: PromiseOrValue<BigNumberish>,
      _depth: PromiseOrValue<BigNumberish>,
      _bucketDepth: PromiseOrValue<BigNumberish>,
      _batchId: PromiseOrValue<BytesLike>,
      _immutable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    copyBatchBulk(
      bulkBatches: PostageStamp.ImportBatchStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createBatch(
      _owner: PromiseOrValue<string>,
      _initialBalancePerChunk: PromiseOrValue<BigNumberish>,
      _depth: PromiseOrValue<BigNumberish>,
      _bucketDepth: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BytesLike>,
      _immutable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentTotalOutPayment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expireLimited(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    expiredBatchesExist(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstBatchId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseDepth(
      _batchId: PromiseOrValue<BytesLike>,
      _newDepth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isBatchesTreeEmpty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastExpiryBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumBucketDepth(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumInitialBalancePerChunk(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumValidityBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remainingBalance(
      _batchId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumValidityBlocks(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    topUp(
      _batchId: PromiseOrValue<BytesLike>,
      _topupAmountPerChunk: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalPot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validChunkCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
